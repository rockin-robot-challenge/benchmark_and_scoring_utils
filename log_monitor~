#!/usr/bin/env python

import datetime
import glob
import os
import time

LOG_DIR = "/home/rockin/logs/"

class colors:
	INFO = '\033[96m'
	OK = '\033[92m'
	WARNING = '\033[93m'
	ERROR = '\a\033[91m'
	END = '\033[0m'

if not 'ROCKIN_ENV' in os.environ:
	print colors.ERROR + "Error: no ROCKIN_ENV environment set" + colors.END
	exit()





if os.environ['ROCKIN_ENV'] == 'log@WORK':
	print colors.INFO + "log@WORK environment" + colors.END
	env_prefix = "log@WORK "
	log_prefix = LOG_DIR + "log_work_mocap_"
	log_size_growth = 50 * 1000


if os.environ['ROCKIN_ENV'] == 'log@HOME':
	print colors.INFO + "FBM1H environment" + colors.END
	env_prefix = "log@HOME "
	log_prefix = LOG_DIR + "log_home_mocap_"
	log_size_growth = 50 * 1000





if os.environ['ROCKIN_ENV'] == 'FBM1H':
	print colors.INFO + "FBM1H environment" + colors.END
	env_prefix = "FBM1H "
	log_prefix = LOG_DIR + "log_fbm1h_mocap_"
	log_size_growth = 50 * 1000

if os.environ['ROCKIN_ENV'] == 'FBM1W':
	print colors.INFO + "FBM1W environment" + colors.END
	env_prefix = "FBM1W "
	log_prefix = LOG_DIR + "log_fbm1w_mocap_"
	log_size_growth = 50 * 1000

if os.environ['ROCKIN_ENV'] == 'FBM2H':
	print colors.INFO + "FBM2H environment" + colors.END
	env_prefix = "FBM2H "
	log_prefix = LOG_DIR + "log_fbm2h_mocap_"
	log_size_growth = 50 * 1000

if os.environ['ROCKIN_ENV'] == 'FBM3W':
	print colors.INFO + "FBM3W environment" + colors.END
	env_prefix = "FBM3W "
	log_prefix = LOG_DIR + "log_fbm3w_mocap_"
	log_size_growth = 50 * 1000

if os.environ['ROCKIN_ENV'] == 'TBMH':
	print colors.INFO + "TBM@HOME environment" + colors.END
	env_prefix = "TBM@HOME "
	log_prefix = LOG_DIR + "log_tbmh_mocap_"
	log_size_growth = 50 * 1000

if os.environ['ROCKIN_ENV'] == 'TBMW':
	env_prefix = "TBM@WORK "
	print colors.INFO + "TBM@WORK environment" + colors.END
	log_prefix = LOG_DIR + "log_tbmw_mocap_"
	log_size_growth = 50 * 1000

latest_log = ""
latest_size = 0

def timestamp():
	ts = time.time()

	return datetime.datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")

while (True):
	active_log = glob.glob(log_prefix + '*.active')
	
	if not active_log:
		print colors.ERROR + env_prefix + timestamp() + " No active log detected" + colors.END

	else:
		# Check multiple active log files
		if len(active_log) > 1:
			print colors.WARNING + env_prefix + timestamp() + " Multiple active logs detected" + colors.END

		# Find newest log file
		active_log = max(glob.iglob(log_prefix + '*.active'), key=os.path.getctime)

		# Check if it is a new log file
		if active_log != latest_log:
			latest_log = active_log
			latest_size = -log_size_growth
			print colors.OK + env_prefix + timestamp() + " New log file" + colors.END
		
#		print colors.OK + env_prefix + timestamp() + " Active log: " + active_log + colors.END
		
		# Get log size
		log_size = os.stat(active_log).st_size
		size_diff = log_size - latest_size
		latest_size = log_size
		
		# Check if it is growing as expected
		if size_diff > log_size_growth:
			print colors.OK + env_prefix + timestamp() + " Log is growing: +%d kb" % (size_diff / 1000) + colors.END
		else:
			print colors.ERROR + env_prefix + timestamp() + " Log file not growing as expected: +%d kb" % (size_diff / 1000) + colors.END
		
				
	time.sleep(2)
	
	
	
